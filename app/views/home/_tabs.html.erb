<div class="text-sm font-medium text-center text-gray-500 border-b border-gray-200 dark:text-gray-400 dark:border-gray-700">
  <ul class="flex -mb-px">
    <li class="flex-auto me-2">
      <button class="active inline-block p-4 border-b-2 rounded-t-lg tab-active tab-btn" data-tab="tab-songs" data-search-url="<%= songs_url %>">
        Songs
      </button>
    </li>
    <li class="flex-auto me-2">
      <button class="inline-block p-4 border-b-2 rounded-t-lg tab-btn" data-tab="tab-artists" data-search-url="<%= artists_url %>">
        Artists
      </button>
    </li>
    <li class="flex-auto me-2">
      <button class="inline-block p-4 border-b-2 rounded-t-lg tab-btn" data-tab="tab-radio-stations" data-search-url="<%= radio_stations_url %>">
        Radio stations
      </button>
    </li>
  </ul>
</div>

<script>
    // JavaScript to handle tab switching
    document.addEventListener("DOMContentLoaded", function () {
        const tabButtons = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');

        tabButtons.forEach(button => {
            button.addEventListener('click', (event) => {
                // Remove 'active' class from all buttons
                tabButtons.forEach(btn => btn.classList.remove('active'));
                // Hide all tab contents
                tabContents.forEach(tabContent => {
                    tabContent.classList.add('hidden')
                    tabContent.parentNode.classList.remove('active-tab-content-wrapper')
                });

                // Add 'active' class to the clicked button
                button.classList.add('active');

                // Show the corresponding tab content
                const tabId = button.getAttribute('data-tab');
                const tabContent = document.getElementById(tabId);
                tabContent.classList.remove('hidden');
                tabContent.parentNode.classList.add('active-tab-content-wrapper');

                url = new URL(button.dataset.searchUrl)

                fetch(url, { headers: { Accept: 'text/vnd.turbo-stream.html' } })
                  .then(response => response.text())
                  .then(html => Turbo.renderStreamMessage(html))
            });
        });
    });
</script>
